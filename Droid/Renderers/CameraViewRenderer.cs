using System;
using System.IO;
using Android.App;
using Android.Content;
using Android.Graphics;
using Android.Hardware;
using Android.OS;
using Android.Runtime;
using Android.Views;
using Android.Widget;
using Plugin.Permissions;
using WeldingMask.Droid.Renderers;
using WeldingMask.Renderers;
using Xamarin.Forms;
using Xamarin.Forms.Platform.Android;
using Android.Hardware.Camera2;
using Java.Util.Concurrent;
using Java.Lang;
using System.Collections.Generic;
using Android.Media;
using Android.Util;

[assembly: ExportRenderer(typeof(CameraView), typeof(CameraViewRenderer))]
namespace WeldingMask.Droid.Renderers
{
	/*
     * Display Camera Stream: http://developer.xamarin.com/recipes/android/other_ux/textureview/display_a_stream_from_the_camera/
     * Camera Rotation: http://stackoverflow.com/questions/3841122/android-camera-preview-is-sideways
     */
    public class CameraViewRenderer : ViewRenderer<CameraView,Android.Views.View>, TextureView.ISurfaceTextureListener
	{
        //global::Android.Hardware.Camera camera;	

        private static readonly SparseIntArray ORIENTATIONS = new SparseIntArray();

        //{@link CaptureRequest.Builder} for the camera preview
        public CaptureRequest.Builder mPreviewRequestBuilder;

        // {@link CaptureRequest} generated by {@link #mPreviewRequestBuilder}
        public CaptureRequest mPreviewRequest;


        // A {@link Semaphore} to prevent the app from exiting before closing the camera.
        public Semaphore mCameraOpenCloseLock = new Semaphore(1);



        // A {@link CameraCaptureSession } for camera preview.
        public CameraCaptureSession mCaptureSession;

        // A reference to the opened CameraDevice
        public CameraDevice mCameraDevice;


        // An {@link ImageReader} that handles still image capture.
        private ImageReader mImageReader;


        Activity activity;
		CameraFacing cameraType;
		TextureView textureView;
		SurfaceTexture surfaceTexture;
		global::Android.Views.View view;

		bool flashOn;

		byte[] imageBytes;

        public CameraViewRenderer()
		{

		}

        protected override void OnElementChanged(ElementChangedEventArgs<CameraView> e)
		{
			base.OnElementChanged(e);

			if (e.OldElement != null || Element == null)
				return;

			try
			{
				activity = this.Context as Activity;

                view = activity.LayoutInflater.Inflate(Resource.Layout.CameraLayout, this, false);
				cameraType = CameraFacing.Back;

                textureView = view.FindViewById<TextureView>(Resource.Id.textureView);
				textureView.SurfaceTextureListener = this;
                				
                SetNativeControl(view);
			}
			catch (System.Exception)
			{
				
			}
		}


		protected override void OnLayout(bool changed, int l, int t, int r, int b)
		{
			base.OnLayout(changed, l, t, r, b);

			var msw = MeasureSpec.MakeMeasureSpec(r - l, MeasureSpecMode.Exactly);
			var msh = MeasureSpec.MakeMeasureSpec(b - t, MeasureSpecMode.Exactly);

			view.Measure(msw, msh);
			view.Layout(0, 0, r - l, b - t);
		}


		public void OnSurfaceTextureAvailable(SurfaceTexture texture, int width, int height)
		{
            try
            {
                /*camera = global::Android.Hardware.Camera.Open((int)cameraType);

                var param = camera.GetParameters();

                param.FocusMode = (Android.Hardware.Camera.Parameters.FocusModeContinuousPicture);
                param.AutoExposureLock = true;
                param.WhiteBalance = (Android.Hardware.Camera.Parameters.WhiteBalanceAuto);
                camera.SetParameters(param);

                textureView.LayoutParameters = new FrameLayout.LayoutParams(width, height);
                surfaceTexture = surface;

                camera.SetPreviewTexture(surface);
                PrepareAndStartCamera();*/


                ORIENTATIONS.Append((int)SurfaceOrientation.Rotation0, 90);
                ORIENTATIONS.Append((int)SurfaceOrientation.Rotation90, 0);
                ORIENTATIONS.Append((int)SurfaceOrientation.Rotation180, 270);
                ORIENTATIONS.Append((int)SurfaceOrientation.Rotation270, 180);


                // We set up a CaptureRequest.Builder with the output Surface.
                mPreviewRequestBuilder = mCameraDevice.CreateCaptureRequest(CameraTemplate.Manual);

                // Param

                //mPreviewRequestBuilder.Set(CaptureRequest.ControlMode, 0);

                mPreviewRequestBuilder.Set(CaptureRequest.ControlAeMode, 0);
                //mPreviewRequestBuilder.Set(CaptureRequest.ControlAeLock, true);
                //mPreviewRequestBuilder.Set(CaptureRequest.ControlAwbLock, false);
                //mPreviewRequestBuilder.Set(CaptureRequest.ControlAwbMode, 0);



                mPreviewRequestBuilder.Set(CaptureRequest.SensorExposureTime, Long.ValueOf("125"));
                mPreviewRequestBuilder.Set(CaptureRequest.SensorSensitivity, 100);
                //mPreviewRequestBuilder.Set(CaptureRequest.SensorFrameDuration, 1 / 30);
                // mPreviewRequestBuilder.Set(CaptureRequest.ControlAeExposureCompensation, -12 );
                Surface surface = new Surface(texture);

                mPreviewRequestBuilder.AddTarget(surface);

                // Here, we create a CameraCaptureSession for camera preview.
                // List<Surface> surfaces = new List<Surface>();
                // surfaces.Add(surface);
                // surfaces.Add(mImageReader.Surface);
                // mCameraDevice.CreateCaptureSession(surfaces, new CameraCaptureSessionCallback(this), null);


            }
            catch(System.Exception e)
            {
                //CrossPermissions.Current.OpenAppSettings();
            }
		}


		public bool OnSurfaceTextureDestroyed(SurfaceTexture surface)
		{
            // camera.StopPreview();
            // camera.Release();

            CloseCamera();
            return true;
		}

		public void OnSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height)
		{
			// PrepareAndStartCamera();
		}

		public void OnSurfaceTextureUpdated(SurfaceTexture surface)
		{

		}


        private void CloseCamera()
        {
            try
            {
                mCameraOpenCloseLock.Acquire();
                if (null != mCaptureSession)
                {
                    mCaptureSession.Close();
                    mCaptureSession = null;
                }
                if (null != mCameraDevice)
                {
                    mCameraDevice.Close();
                    mCameraDevice = null;
                }
                if (null != mImageReader)
                {
                    mImageReader.Close();
                    mImageReader = null;
                }
            }
            catch (InterruptedException e)
            {
                throw new RuntimeException("Interrupted while trying to lock camera closing.", e);
            }
            finally
            {
                mCameraOpenCloseLock.Release();
            }
        }



       /* private void PrepareAndStartCamera()
		{
			camera.StopPreview();

			var display = activity.WindowManager.DefaultDisplay;

			if (display.Rotation == SurfaceOrientation.Rotation0)
			{
				camera.SetDisplayOrientation(90);
			}

			if (display.Rotation == SurfaceOrientation.Rotation270)
			{
				camera.SetDisplayOrientation(180);
			}

			camera.StartPreview();
		}*/

		

	}
}